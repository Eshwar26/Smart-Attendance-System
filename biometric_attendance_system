
#include <Adafruit_Fingerprint.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>
#include <RTClib.h>

// Fingerprint Sensor Pins
SoftwareSerial mySerial(D5, D6); // TX, RX
Adafruit_Fingerprint finger(&mySerial);

// LCD and RTC
LiquidCrystal_I2C lcd(0x27, 16, 2);
RTC_DS3231 rtc;

struct User {
  char name[20];
  int rollNo;
};

User users[127];
bool enrollMode = false;

void setup() {
  Serial.begin(115200);

  // Initialize I2C for RTC and LCD
  Wire.begin(D2, D1); // SDA, SCL
  lcd.begin(16, 2);
  lcd.init();
  lcd.backlight();

  lcd.print("Starting...");
  delay(2000);
  lcd.clear();

  // RTC detectionnnnn
  if (!rtc.begin()) {
    lcd.print("RTC Failed!");
    while (1);
  }


   rtc.adjust(DateTime(2025, 1, 23, 9, 31, 0));

  // Fingerprint Sensor detectionnnnn
  finger.begin(57600);
  if (!finger.verifyPassword()) {
    lcd.print("Sensor Failed!");
    while (1);
  }

  lcd.print("Ready!");
  delay(2000);
  lcd.clear();
  lcd.print("Attendance Mode");
}

void loop() {
  if (Serial.available()) {
    int mode = Serial.parseInt();
    if (mode == 1) {
      enrollMode = true;
      enrollUser();
    } else if (mode == 2) {
      enrollMode = false;
      lcd.clear();
      lcd.print("Attendance Mode");
    }
  }

  if (!enrollMode) {
    getFingerprintAttendance();
  }
}

void enrollUser() {
  lcd.clear();
  lcd.print("Enrollment Mode");
  delay(2000);

  // Flush serial input to avoid skipping prompts
  flushInput();

  // Get Name
  Serial.println("Enter name:");
  lcd.clear();
  lcd.print("Enter Name:");
  while (!Serial.available());
  String name = Serial.readStringUntil('\n');
  name.trim();
  if (name.length() == 0) {
    lcd.clear();
    lcd.print("Invalid Name");
    Serial.println("Invalid Name! Restart enrollment.");
    delay(2000);
    return;
  }
  Serial.println("Name: " + name);

  // Flush serial input before next prompt
  flushInput();

  // Get Roll Number
  Serial.println("Enter roll number:");
  lcd.clear();
  lcd.print("Enter Roll No:");
  while (!Serial.available());
  int roll = Serial.parseInt();
  if (roll <= 0) {
    lcd.clear();
    lcd.print("Invalid Roll No");
    Serial.println("Invalid Roll Number! Restart enrollment.");
    delay(2000);
    return;
  }
  Serial.println("Roll Number: " + String(roll));

  // Begin Enrollment
  lcd.clear();
  lcd.print("Place finger");
  lcd.setCursor(0, 1);
  lcd.print("multiple times");

  int id = getFreeID(); // Get a free ID for this user
  Serial.println("Enrolling user with ID: " + String(id));

  for (int i = 1; i <= 3; i++) { // Three steps for enrollment
    lcd.clear();
    lcd.print("Step ");
    lcd.print(i);
    lcd.print(" of 3");
    Serial.println("Waiting for finger... Step " + String(i) + " of 3");

    while (!captureAndStoreFingerprint(i)) {
      lcd.clear();
      lcd.print("Failed! Retry");
      lcd.setCursor(0, 1);
      lcd.print("Step ");
      lcd.print(i);
      delay(2000); // Delay before retrying
    }

    lcd.clear();
    lcd.print("Step ");
    lcd.print(i);
    lcd.print(" Success!");
    delay(2000);
  }

  // Save User Data
  name.toCharArray(users[id].name, 20);
  users[id].rollNo = roll;

  lcd.clear();
  lcd.print("Enrollment Done!");
  Serial.println("Enrollment complete for ID: " + String(id));
  delay(2000);

  enrollMode = false;
  lcd.clear();
  lcd.print("Attendance Mode");
}

bool captureAndStoreFingerprint(int step) {
  int p = -1;

  // Wait for user to place finger
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      continue; // Keep waiting for the finger
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error with fingerprint sensor.");
      return false;
    } else if (p == FINGERPRINT_IMAGEFAIL) {
      Serial.println("Imaging error. Try again.");
      return false;
    }
  }
  Serial.println("Fingerprint image taken.");

  // Step 2: Convert the image to a template
  p = finger.image2Tz(step);
  if (p != FINGERPRINT_OK) {
    Serial.println("Failed to convert image to template. Error: " + String(p));
    return false;
  }
  Serial.println("Fingerprint template created.");

  // Final step: Store the template
  if (step == 3) { // Final step
    p = finger.createModel();
    if (p != FINGERPRINT_OK) {
      Serial.println("Failed to create model. Error: " + String(p));
      return false;
    }
    p = finger.storeModel(getFreeID());
    if (p != FINGERPRINT_OK) {
      Serial.println("Failed to store model. Error: " + String(p));
      return false;
    }
    Serial.println("Fingerprint successfully stored.");
  }

  return true;
}

void getFingerprintAttendance() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    lcd.clear();
    lcd.print("Finger not found!");
    delay(2000);
    lcd.clear();
    lcd.print("Attendance Mode");
    return;
  }

  DateTime now = rtc.now();
  char timeStr[20];
  sprintf(timeStr, "%02d/%02d/%02d %02d:%02d:%02d",
          now.day(), now.month(), now.year() % 100,
          now.hour(), now.minute(), now.second());

  lcd.clear();
  lcd.print("Hello ");
  lcd.print(users[finger.fingerID].name);
  lcd.setCursor(0, 1);
  lcd.print("Marked!");

  Serial.print("Attendance marked for ");
  Serial.print(users[finger.fingerID].name);
  Serial.print(" at ");
  Serial.println(timeStr);

  delay(2000);
  lcd.clear();
  lcd.print("Attendance Mode");
}

uint8_t getFreeID() {
  for (uint8_t i = 1; i < 127; i++) {
    if (!users[i].name[0]) return i;
  }
  return 1; // Default to 1 if all IDs are taken
}

void flushInput() {
  while (Serial.available()) Serial.read();
}

















// #include <Adafruit_Fingerprint.h>
// #include <Wire.h>
// #include <LiquidCrystal_I2C.h>
// #include <SoftwareSerial.h>
// #include <RTClib.h>
// #include <ESP8266WiFi.h> // Correct library for ESP8266
// #include <ESP8266HTTPClient.h>

// // WiFi credentials
// const char* ssid = "I1927";
// const char* password = "12345678";

// // Google Apps Script URL
// const char* googleScriptUrl = "https://script.google.com/macros/s/AKfycbxvTekj6K7zo9xHuRD67A/exec";

// // Fingerprint Sensor Pins
// SoftwareSerial mySerial(D5, D6); // TX, RX
// Adafruit_Fingerprint finger(&mySerial);

// // LCD and RTC
// LiquidCrystal_I2C lcd(0x27, 16, 2);
// RTC_DS3231 rtc;

// // User data structure
// struct User {
//   char name[20];
//   int rollNo;
// };
// User users[127];
// bool enrollMode = false;

// void setup() {
//   Serial.begin(9600);

//   // Initialize I2C for RTC and LCD
//   Wire.begin(D2, D1); // SDA, SCL
//   lcd.begin(16, 2);
//   lcd.init();
//   lcd.backlight();

//   lcd.print("Starting...");
//   delay(2000);
//   lcd.clear();

//   // Initialize RTC
//   if (!rtc.begin()) {
//     lcd.print("RTC Failed!");
//     while (1);
//   }

//   // Initialize Fingerprint Sensor
//   finger.begin(57600);
//   if (!finger.verifyPassword()) {
//     lcd.print("Sensor Failed!");
//     while (1);
//   }

//   // Initialize WiFi
//   WiFi.begin(ssid, password);
//   lcd.clear();
//   lcd.print("Connecting WiFi...");
//   while (WiFi.status() != WL_CONNECTED) {
//     delay(500);
//     lcd.print(".");
//   }
//   lcd.clear();
//   lcd.print("WiFi Connected!");

//   delay(2000);
//   lcd.clear();
//   lcd.print("Attendance Mode");
// }

// void loop() {
//   if (Serial.available()) {
//     int input = Serial.parseInt();
//     if (input == 1) {
//       enrollMode = true;
//       enrollUser();
//     } else if (input == 2) {
//       enrollMode = false;
//       lcd.clear();
//       lcd.print("Attendance Mode");
//     }
//   }

//   if (!enrollMode) {
//     getFingerprintAttendance();
//   }
// }

// void enrollUser() {
//   lcd.clear();
//   lcd.print("Enrollment Mode");

//   // Get name from serial monitor
//   Serial.println("Enter name:");
//   String name = waitForSerialInput();
//   name.trim();

//   // Get roll number from serial monitor
//   Serial.println("Enter roll number:");
//   String rollStr = waitForSerialInput();
//   int roll = rollStr.toInt();

//   lcd.clear();
//   lcd.print("Place finger");
//   lcd.setCursor(0, 1);
//   lcd.print("multiple times");

//   int id = getFreeID();
//   for (int i = 1; i <= 5; i++) {
//     lcd.clear();
//     lcd.print("Place finger");
//     lcd.setCursor(0, 1);
//     lcd.print("Step ");
//     lcd.print(i);
//     lcd.print(" of 5");

//     while (!getFingerprintEnroll(id)) {
//       delay(500); // Wait before retrying
//     }
//     delay(2000);
//   }

//   name.toCharArray(users[id].name, 20);
//   users[id].rollNo = roll;

//   lcd.clear();
//   lcd.print("Enrollment Done!");
//   Serial.println("Enrollment complete!");
//   delay(2000);

//   enrollMode = false;
//   lcd.clear();
//   lcd.print("Attendance Mode");
// }

// void getFingerprintAttendance() {
//   uint8_t p = finger.getImage();
//   if (p != FINGERPRINT_OK) return;

//   p = finger.image2Tz();
//   if (p != FINGERPRINT_OK) return;

//   p = finger.fingerFastSearch();
//   if (p != FINGERPRINT_OK) {
//     lcd.clear();
//     lcd.print("Finger not found!");
//     delay(2000);
//     lcd.clear();
//     lcd.print("Attendance Mode");
//     return;
//   }

//   DateTime now = rtc.now();
//   char timeStr[20];
//   sprintf(timeStr, "%02d/%02d/%02d %02d:%02d:%02d",
//           now.day(), now.month(), now.year() % 100,
//           now.hour(), now.minute(), now.second());

//   lcd.clear();
//   lcd.print("Hello ");
//   lcd.print(users[finger.fingerID].name);
//   lcd.setCursor(0, 1);
//   lcd.print("Marked!");

//   Serial.print("Attendance marked for ");
//   Serial.print(users[finger.fingerID].name);
//   Serial.print(" at ");
//   Serial.println(timeStr);

//   // Log to Google Sheets
//   logToGoogleSheets(users[finger.fingerID].name, users[finger.fingerID].rollNo, timeStr);

//   delay(2000);
//   lcd.clear();
//   lcd.print("Attendance Mode");
// }

// bool getFingerprintEnroll(uint8_t id) {
//   int p = -1;
//   while (p != FINGERPRINT_OK) {
//     p = finger.getImage();
//     if (p == FINGERPRINT_NOFINGER) continue;
//     if (p != FINGERPRINT_OK) return false;

//     p = finger.image2Tz(1);
//     if (p != FINGERPRINT_OK) return false;

//     p = finger.storeModel(id);
//     if (p != FINGERPRINT_OK) return false;

//     return true;
//   }
//   return false;
// }

// uint8_t getFreeID() {
//   for (uint8_t i = 1; i < 127; i++) {
//     if (!users[i].name[0]) return i;
//   }
//   return 1;
// }

// String waitForSerialInput() {
//   while (!Serial.available()) {
//     delay(100);
//   }
//   return Serial.readStringUntil('\n');
// }

// void logToGoogleSheets(String name, int rollNo, String timestamp) {
//   if (WiFi.status() == WL_CONNECTED) {
//     WiFiClient client;
//     HTTPClient http;

//     String url = String(googleScriptUrl) + "?name=" + name + "&roll=" + rollNo + "&time=" + timestamp;
//     http.begin(client, url);
//     int httpResponseCode = http.GET();
//     http.end();
//   }
// }
